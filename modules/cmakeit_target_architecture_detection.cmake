#
# CMakeIt - a collection of CMake modules to build programs from 'Visual Studio'-like 
# projects, and well-structure project layouts (public and private include folders,
# source folders), using CMake build system. Also features pre compiled headers
# support, unit tests, installation ('make install' style), packaging, etc.
#
# Copyright (C) 2013, Fornazin & Fornazin Consultoria em Inform√°tica Ltda
#
# This library is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free Software 
# Foundation; either version 3 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT ANY 
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
# PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License along 
# with this library; if not, please write to the Free Software Foundation, Inc., 
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

#
# cmakeit_target_architecture_detection.cmake - detect target architecture to build project
#

if(NOT CMAKEIT_HIDE_BANNER)
	message(STATUS "Detecting target architecture for building...")
endif()

if(CMAKE_VS_PLATFORM_NAME)

	if((CMAKE_VS_PLATFORM_NAME STREQUAL "Win32") OR (CMAKE_VS_PLATFORM_NAME STREQUAL "x86"))
		set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_INTEL_X86})
	endif()

	if(CMAKE_VS_PLATFORM_NAME STREQUAL "x64")
		set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_INTEL_X64})
	endif()

	if(CMAKE_VS_PLATFORM_NAME STREQUAL "arm")
		set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_ARM})
	endif()

	if(CMAKE_VS_PLATFORM_NAME STREQUAL "arm64")
		set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_ARM64})
	endif()

elseif(MINGW)

	if(MINGW64 OR (CMAKE_SIZE_OF_VOID_P EQUAL 8))
		set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_INTEL_X64})
	elseif(MINGW32 OR (CMAKE_SIZE_OF_VOID_P EQUAL 4))
		set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_INTEL_X86})
	endif()

elseif(CIGWIN)

	if(CYGWIN64 OR (CMAKE_SIZE_OF_VOID_P EQUAL 8))
		set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_INTEL_X64})
	elseif(CYGWIN32 OR (CMAKE_SIZE_OF_VOID_P EQUAL 4))
		set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_INTEL_X86})
	endif()

elseif(CMAKEIT_TARGET_PLATFORM STREQUAL ${CMAKEIT_TARGET_PLATFORM_WEBASSEMBLY})

	set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_WEBASSEMBLY})

else()

	if((NOT CMAKEIT_TARGET_ARCHITECTURE) AND CMAKE_C_COMPILER_TARGET)
		cmakeit_match_target_architecture(${CMAKE_C_COMPILER_TARGET})
	endif()

	if((NOT CMAKEIT_TARGET_ARCHITECTURE) AND CMAKE_CXX_COMPILER_TARGET)
		cmakeit_match_target_architecture(${CMAKE_CXX_COMPILER_TARGET})
	endif()

	if((NOT CMAKEIT_TARGET_ARCHITECTURE) AND CMAKE_C_LIBRARY_ARCHITECTURE)
		cmakeit_match_target_architecture(${CMAKE_C_LIBRARY_ARCHITECTURE})
	endif()

	if((NOT CMAKEIT_TARGET_ARCHITECTURE) AND CMAKE_CXX_LIBRARY_ARCHITECTURE)
		cmakeit_match_target_architecture(${CMAKE_CXX_LIBRARY_ARCHITECTURE})
	endif()

	if((NOT CMAKEIT_TARGET_ARCHITECTURE) AND (NOT CMAKE_CROSSCOMPILING) AND CMAKE_SYSTEM_PROCESSOR)
		cmakeit_match_target_architecture(${CMAKE_SYSTEM_PROCESSOR})
	endif()

endif()

if(NOT CMAKEIT_TARGET_ARCHITECTURE)

	if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_VISUAL_C})

		string(REGEX MATCH "x64/cl" INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_X64 ${CMAKE_C_COMPILER})
		string(REGEX MATCH "x86/cl" INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_X86 ${CMAKE_C_COMPILER})
		string(REGEX MATCH "arm64/cl" INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_ARM64 ${CMAKE_C_COMPILER})
		string(REGEX MATCH "arm/cl" INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_ARM ${CMAKE_C_COMPILER})

		if(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_X64)

			set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_INTEL_X64})

			unset(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_X64)

		endif()

		if(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_X86)

			set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_INTEL_X86})

			unset(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_X86)

		endif()

		if(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_ARM64)
			set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_ARM64})

			unset(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_ARM64)
		endif()

		if(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_ARM)

			set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_ARM})

			unset(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_ARM)
			
		endif()

	endif()

endif()

if(NOT CMAKEIT_TARGET_ARCHITECTURE)
	set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_UNSPECIFIED})
endif()
