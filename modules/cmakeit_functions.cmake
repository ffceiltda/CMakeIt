#
# CMakeIt - a collection of CMake modules to build programs from 'Visual Studio'-like 
# projects, and well-structure project layouts (public and private include folders,
# source folders), using CMake build system. Also features pre compiled headers
# support, unit tests, installation ('make install' style), packaging, etc.
#
# Copyright (C) 2013, Fornazin & Fornazin Consultoria em Inform√°tica Ltda
#
# This library is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free Software 
# Foundation; either version 3 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT ANY 
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
# PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License along 
# with this library; if not, please write to the Free Software Foundation, Inc., 
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

#
# cmakeit_functions.cmake - CMakeIt function scripts
#

#
# cmakeit_ignore_prefix - check if the file should be ignored because the prefix of the filename
#
# Parameters:
#   FILENAME - filename to validate
#   RESULT - result of the call
#
function(cmakeit_ignore_prefix FILENAME RESULT)

	set(INTERNAL_CMAKEIT_IGNORE_PREFIX_RESULT OFF)

	foreach(PREFIX ${CMAKEIT_GLOB_EXCLUSION_PREFIX_LIST})
		
		if(NOT INTERNAL_CMAKEIT_IGNORE_PREFIX_RESULT)

			string(FIND ${FILENAME} ${PREFIX} FIND_INDEX)

			if(FIND_INDEX EQUAL 0)
				set(INTERNAL_CMAKEIT_IGNORE_PREFIX_RESULT ON)
			endif()
		
		endif()

	endforeach()

	set(${RESULT} INTERNAL_CMAKEIT_IGNORE_PREFIX_RESULT)

endfunction()

#
# cmakeit_ignore_suffix - check if the file should be ignored because the suffix of the filename
#
# Parameters:
#   FILENAME - filename to validate
#   RESULT - result of the call
#
function(cmakeit_ignore_suffix FILENAME RESULT)
  
	set(INTERNAL_CMAKEIT_IGNORE_SUFFIX_RESULT OFF)

	string(LENGTH ${FILENAME} FILENAME_LENGTH)

	foreach(SUFFIX ${CMAKEIT_GLOB_EXCLUSION_SUFFIX_LIST})

		if(NOT INTERNAL_CMAKEIT_IGNORE_SUFFIX_RESULT)

			string(LENGTH ${SUFFIX} FIND_LENGTH)
			
			math(EXPR EXPECTED_INDEX "${FILENAME_LENGTH} - ${FIND_LENGTH}")

			string(FIND ${FILENAME} ${SUFFIX} FIND_INDEX REVERSE)

			if(FIND_INDEX EQUAL EXPECTED_INDEX)
				set(INTERNAL_CMAKEIT_IGNORE_SUFFIX_RESULT ON)
			endif()

		endif()

	endforeach()

	set(${RESULT} INTERNAL_CMAKEIT_IGNORE_SUFFIX_RESULT)

endfunction()

#
# cmakeit_is_cxx_filename - check if filename is a C language source / header filename
#
#
# cmakeit_is_cxx_filename - check if filename is a C++ language source / header filename
#
function(cmakeit_is_cxx_filename FILENAME RESULT)

	set(INTERNAL_IS_CXX_FILENAME_RESULT OFF)

	string(LENGTH ${FILENAME} FILENAME_LENGTH)

	foreach(SUFFIX ${CMAKEIT_GLOB_CXX_HEADER_SUFFIX_LIST})

		if(NOT INTERNAL_IS_CXX_FILENAME_RESULT)

			string(LENGTH ${SUFFIX} FIND_LENGTH)

			math(EXPR EXPECTED_INDEX "${FILENAME_LENGTH} - ${FIND_LENGTH}")

			string(FIND ${FILENAME} ${SUFFIX} FIND_INDEX REVERSE)

			if(FIND_INDEX EQUAL EXPECTED_INDEX)
				set(INTERNAL_IS_CXX_FILENAME_RESULT ON)
			endif()

		endif()
		
	endforeach()

	foreach(SUFFIX ${CMAKEIT_GLOB_CXX_SOURCE_SUFFIX_LIST})

		if(NOT INTERNAL_IS_CXX_FILENAME_RESULT)

			string(LENGTH ${SUFFIX} FIND_LENGTH)

			math(EXPR EXPECTED_INDEX "${FILENAME_LENGTH} - ${FIND_LENGTH}")

			string(FIND ${FILENAME} ${SUFFIX} FIND_INDEX REVERSE)

			if(FIND_INDEX EQUAL EXPECTED_INDEX)
				set(INTERNAL_IS_CXX_FILENAME_RESULT ON)
			endif()

		endif()
		
	endforeach()

	set(${RESULT} ${INTERNAL_IS_CXX_FILENAME_RESULT} PARENT_SCOPE)

endfunction()

#
# cmakeit_is_c_filename - check if filename is a C language source / header filename
#
function(cmakeit_is_c_filename FILENAME RESULT)

	set(INTERNAL_IS_C_FILENAME_RESULT OFF)

	string(LENGTH ${FILENAME} FILENAME_LENGTH)

	foreach(SUFFIX ${CMAKEIT_GLOB_C_HEADER_SUFFIX_LIST})

		if(NOT INTERNAL_IS_C_FILENAME_RESULT)

			string(LENGTH ${SUFFIX} FIND_LENGTH)

			math(EXPR EXPECTED_INDEX "${FILENAME_LENGTH} - ${FIND_LENGTH}")

			string(FIND ${FILENAME} ${SUFFIX} FIND_INDEX REVERSE)

			if(FIND_INDEX EQUAL EXPECTED_INDEX)
				set(INTERNAL_IS_C_FILENAME_RESULT ON)
			endif()

		endif()
		
	endforeach()

	foreach(SUFFIX ${CMAKEIT_GLOB_C_SOURCE_SUFFIX_LIST})

		if(NOT INTERNAL_IS_C_FILENAME_RESULT)

			string(LENGTH ${SUFFIX} FIND_LENGTH)

			math(EXPR EXPECTED_INDEX "${FILENAME_LENGTH} - ${FIND_LENGTH}")

			string(FIND ${FILENAME} ${SUFFIX} FIND_INDEX REVERSE)

			if(FIND_INDEX EQUAL EXPECTED_INDEX)
				set(INTERNAL_IS_C_FILENAME_RESULT ON)
			endif()

		endif()
		
	endforeach()

	set(${RESULT} ${INTERNAL_IS_C_FILENAME_RESULT} PARENT_SCOPE)

endfunction()

#
# cmakeit_is_header_filename - check if the file is a header to be compiled
#
# Parameters:
#   FILENAME - filename to validate
#   RESULT - result of the call
#   NEED_TO_BE_CONFIGURED - set if file need to be configured
#   CONFIGURED_FILENAME - configured filename
#
function(cmakeit_is_header_filename FILENAME RESULT NEED_TO_BE_CONFIGURED CONFIGURED_FILENAME)
  
	set(INTERNAL_CMAKEIT_HEADER_SUFFIX_RESULT OFF)
	set(INTERNAL_CMAKEIT_NEED_TO_BE_CONFIGURED OFF)
	set(INTERNAL_CMAKEIT_CONFIGURED_FILENAME "")

	string(LENGTH ${FILENAME} FILENAME_LENGTH)

	foreach(SUFFIX ${CMAKEIT_GLOB_HEADER_SUFFIX_LIST})

		if(NOT INTERNAL_CMAKEIT_HEADER_SUFFIX_RESULT)

			string(LENGTH ${SUFFIX} FIND_LENGTH)

			math(EXPR EXPECTED_INDEX "${FILENAME_LENGTH} - ${FIND_LENGTH}")

			string(FIND ${FILENAME} ${SUFFIX} FIND_INDEX REVERSE)

			if(FIND_INDEX EQUAL EXPECTED_INDEX)

				set(INTERNAL_CMAKEIT_HEADER_SUFFIX_RESULT ON)

				math(EXPR EXPECTED_INDEX "${EXPECTED_INDEX} - 3")
			
				string(FIND ${FILENAME} ${SUFFIX} FIND_INDEX REVERSE)

				if(FIND_INDEX EQUAL EXPECTED_INDEX)

					set(INTERNAL_CMAKEIT_NEED_TO_BE_CONFIGURED ON)
					string(REPLACE ".in${SUFFIX}" "${SUFFIX}" INTERNAL_CMAKEIT_CONFIGURED_FILENAME ${FILENAME})

				endif()

			endif()

		endif()

	endforeach()

	set(${RESULT} ${INTERNAL_CMAKEIT_HEADER_SUFFIX_RESULT} PARENT_SCOPE)
	set(${NEED_TO_BE_CONFIGURED} ${INTERNAL_CMAKEIT_NEED_TO_BE_CONFIGURED} PARENT_SCOPE)
	set(${CONFIGURED_FILENAME} ${INTERNAL_CMAKEIT_CONFIGURED_FILENAME} PARENT_SCOPE)

endfunction()

#
# cmakeit_is_source_filename - check if the file is a source to be compiled
#
# Parameters:
#   FILENAME - filename to validate
#   RESULT - result of the call
#   NEED_TO_BE_CONFIGURED - set if file need to be configured
#   CONFIGURED_FILENAME - configured filename
#
function(cmakeit_is_source_filename FILENAME RESULT NEED_TO_BE_CONFIGURED CONFIGURED_FILENAME)
  
	set(INTERNAL_CMAKEIT_SOURCE_SUFFIX_RESULT OFF)
	set(INTERNAL_CMAKEIT_NEED_TO_BE_CONFIGURED OFF)
	set(INTERNAL_CMAKEIT_CONFIGURED_FILENAME "")

	string(LENGTH ${FILENAME} FILENAME_LENGTH)

	foreach(SUFFIX ${CMAKEIT_GLOB_SOURCE_SUFFIX_LIST})

		if(NOT INTERNAL_CMAKEIT_SOURCE_SUFFIX_RESULT)

			string(LENGTH ${SUFFIX} FIND_LENGTH)

			math(EXPR EXPECTED_INDEX "${FILENAME_LENGTH} - ${FIND_LENGTH}")

			string(FIND ${FILENAME} ${SUFFIX} FIND_INDEX REVERSE)

			if(FIND_INDEX EQUAL EXPECTED_INDEX)

				set(INTERNAL_CMAKEIT_SOURCE_SUFFIX_RESULT ON)

				math(EXPR EXPECTED_INDEX "${EXPECTED_INDEX} - 3")
			
				string(FIND ${FILENAME} ${SUFFIX} FIND_INDEX REVERSE)

				if(FIND_INDEX EQUAL EXPECTED_INDEX)

					set(INTERNAL_CMAKEIT_NEED_TO_BE_CONFIGURED ON)
					string(REPLACE ".in${SUFFIX}" "${SUFFIX}" INTERNAL_CMAKEIT_CONFIGURED_FILENAME ${FILENAME})

				endif()

			endif()

		endif()

	endforeach()

	set(${RESULT} ${INTERNAL_CMAKEIT_SOURCE_SUFFIX_RESULT} PARENT_SCOPE)
	set(${NEED_TO_BE_CONFIGURED} ${INTERNAL_CMAKEIT_NEED_TO_BE_CONFIGURED} PARENT_SCOPE)
	set(${CONFIGURED_FILENAME} ${INTERNAL_CMAKEIT_CONFIGURED_FILENAME} PARENT_SCOPE)

endfunction()

#
# cmakeit_is_resource_filename - check if a file is a resource to be compiled
#
# Parameters:
#   FILENAME - filename to validate
#   RESULT - result of the call
#   NEED_TO_BE_CONFIGURED - set if file need to be configured
#   CONFIGURED_FILENAME - configured filename
#
function(cmakeit_is_resource_filename FILENAME RESULT NEED_TO_BE_CONFIGURED CONFIGURED_FILENAME)
  
	set(INTERNAL_CMAKEIT_RESOURCE_SUFFIX_RESULT OFF)
	set(INTERNAL_CMAKEIT_NEED_TO_BE_CONFIGURED OFF)
	set(INTERNAL_CMAKEIT_CONFIGURED_FILENAME "")
	
	string(LENGTH ${FILENAME} FILENAME_LENGTH)

	foreach(SUFFIX ${CMAKEIT_GLOB_RESOURCE_SUFFIX_LIST})

		if(NOT INTERNAL_CMAKEIT_RESOURCE_SUFFIX_RESULT)

			string(LENGTH ${SUFFIX} FIND_LENGTH)

			math(EXPR EXPECTED_INDEX "${FILENAME_LENGTH} - ${FIND_LENGTH}")

			string(FIND ${FILENAME} ${SUFFIX} FIND_INDEX REVERSE)

			if(FIND_INDEX EQUAL EXPECTED_INDEX)

				set(INTERNAL_CMAKEIT_RESOURCE_SUFFIX_RESULT ON)

				math(EXPR EXPECTED_INDEX "${EXPECTED_INDEX} - 3")
			
				string(FIND ${FILENAME} ${SUFFIX} FIND_INDEX REVERSE)

				if(FIND_INDEX EQUAL EXPECTED_INDEX)

					set(INTERNAL_CMAKEIT_NEED_TO_BE_CONFIGURED ON)
					string(REPLACE ".in${SUFFIX}" "${SUFFIX}" INTERNAL_CMAKEIT_CONFIGURED_FILENAME ${FILENAME})

				endif()

			endif()

		endif()

	endforeach()

	set(${RESULT} ${INTERNAL_CMAKEIT_RESOURCE_SUFFIX_RESULT} PARENT_SCOPE)
	set(${NEED_TO_BE_CONFIGURED} ${INTERNAL_CMAKEIT_NEED_TO_BE_CONFIGURED} PARENT_SCOPE)
	set(${CONFIGURED_FILENAME} ${INTERNAL_CMAKEIT_CONFIGURED_FILENAME} PARENT_SCOPE)

endfunction()

#
# cmakeit_add_file_to_configure - add a file to 'configure step' in CMakeIt scripts
#
# Parameters:
#   FILENAME - original filename
#   CONFIGURED_FILENAME - configured filename
#   CONFIGURE_ACTION - one of CMAKEIT_CONFIGURE_ACTION_* options
#
function(cmakeit_add_file_to_configure FILENAME CONFIGURED_FILENAME CONFIGURE_ACTION)

	if(NOT EXISTS ${FILENAME})
		message(FATAL_ERROR "Missing file to configure: ${FILENAME}")
	endif()
	
	list(FIND CMAKEIT_MODULE_CONFIGURE_INPUT_FILES ${FILENAME} PREVIOUS_INDEX)
	
	if(PREVIOUS_INDEX EQUAL -1)
		list(FIND CMAKEIT_MODULE_CONFIGURE_OUTPUT_FILES ${CONFIGURED_FILENAME} PREVIOUS_INDEX)
	endif()

	if(PREVIOUS_INDEX EQUAL -1)
	
		if(CMAKEIT_MODULE_CONFIGURE_INPUT_FILES)
			set(INTERNAL_CMAKEIT_MODULE_CONFIGURE_INPUT_FILES ${CMAKEIT_MODULE_CONFIGURE_INPUT_FILES})
		endif()

		if(CMAKEIT_MODULE_CONFIGURE_OUTPUT_FILES)
			set(INTERNAL_CMAKEIT_MODULE_CONFIGURE_OUTPUT_FILES ${CMAKEIT_MODULE_CONFIGURE_OUTPUT_FILES})
		endif()

		if(CMAKEIT_MODULE_CONFIGURE_ACTIONS_TO_PERFORM)
			set(INTERNAL_CMAKEIT_MODULE_CONFIGURE_ACTIONS_TO_PERFORM ${CMAKEIT_MODULE_CONFIGURE_ACTIONS_TO_PERFORM})
		endif()

		list(APPEND INTERNAL_CMAKEIT_MODULE_CONFIGURE_INPUT_FILES ${FILENAME})
		list(APPEND INTERNAL_CMAKEIT_MODULE_CONFIGURE_OUTPUT_FILES ${CONFIGURED_FILENAME})
		list(APPEND INTERNAL_CMAKEIT_MODULE_CONFIGURE_ACTIONS_TO_PERFORM ${CMAKEIT_CONFIGURE_ACTION_CONFIGURE_FILE})

		set(CMAKEIT_MODULE_CONFIGURE_INPUT_FILES ${INTERNAL_CMAKEIT_MODULE_CONFIGURE_INPUT_FILES} PARENT_SCOPE)
		set(CMAKEIT_MODULE_CONFIGURE_OUTPUT_FILES ${INTERNAL_CMAKEIT_MODULE_CONFIGURE_OUTPUT_FILES} PARENT_SCOPE)
		set(CMAKEIT_MODULE_CONFIGURE_ACTIONS_TO_PERFORM ${INTERNAL_CMAKEIT_MODULE_CONFIGURE_ACTIONS_TO_PERFORM} PARENT_SCOPE)

	endif()

endfunction()

#
# cmakeit_pch_file_exists - scan header and source files for pre-compiled headers support
#
# Parameters:
#   HEADER_FILENAME - header filename to match
#   SOURCE_FILENAME - source filename to match
#
function(cmakeit_pch_file_exists HEADER_FILENAME SOURCE_FILENAME)
	
	if(CMAKEIT_MODULE_PRIVATE_HEADER_FILES)

		foreach(FILENAME ${CMAKEIT_MODULE_PRIVATE_HEADER_FILES})

			if(NOT INTERNAL_FOUND_PCH_HEADER)

				if(FILENAME STREQUAL ${HEADER_FILENAME})
					set(INTERNAL_FOUND_PCH_HEADER ${FILENAME})
				endif()

			endif()

		endforeach()
	
	endif()

	if(NOT INTERNAL_FOUND_PCH_HEADER)

		if(CMAKEIT_MODULE_PUBLIC_HEADER_FILES)
		
			foreach(FILENAME ${CMAKEIT_MODULE_PUBLIC_HEADER_FILES})

				if(NOT INTERNAL_FOUND_PCH_HEADER)

					if(FILENAME STREQUAL ${HEADER_FILENAME})
						set(INTERNAL_FOUND_PCH_HEADER ${FILENAME})
					endif()

				endif()

			endforeach()

		endif()

	endif()

	if(INTERNAL_FOUND_PCH_HEADER)

		if(CMAKEIT_MODULE_SOURCE_FILES)
		
			foreach(FILENAME ${CMAKEIT_MODULE_SOURCE_FILES})

				if(NOT INTERNAL_FOUND_PCH_SOURCE)

					if(FILENAME STREQUAL ${SOURCE_FILENAME})
						set(INTERNAL_FOUND_PCH_SOURCE ${FILENAME})
					endif()

				endif()

			endforeach()

		endif()
		
	endif()

	if(INTERNAL_FOUND_PCH_HEADER AND INTERNAL_FOUND_PCH_SOURCE)

		set(CMAKEIT_FIND_PCH_FILES_HEADER_FILENAME ${INTERNAL_FOUND_PCH_HEADER} PARENT_SCOPE)
		set(CMAKEIT_FIND_PCH_FILES_SOURCE_FILENAME ${INTERNAL_FOUND_PCH_SOURCE} PARENT_SCOPE)

	endif()

endfunction()

#
# cmaeit_find_pch_files - scan header and source files for pre-compiled headers support
#
# Parameters:
#   HEADER_FILENAME - header filename to match
#   SOURCE_FILENAME - source filename to match
#
function(cmaeit_find_pch_files HEADER_FILENAME SOURCE_FILENAME)

	if(CMAKEIT_MODULE_PRIVATE_HEADER_DIR)
		list(APPEND INTERNAL_HEADER_DIRS ${CMAKEIT_MODULE_PRIVATE_HEADER_DIR})
	endif()

	if(CMAKEIT_MODULE_PRIVATE_HEADER_DIR)
		list(APPEND INTERNAL_HEADER_DIRS ${CMAKEIT_MODULE_PUBLIC_HEADER_DIR})
	endif()

	if(CMAKEIT_MODULE_OUTPUT_CONFIGURED_PRIVATE_HEADER_DIR)
		list(APPEND INTERNAL_HEADER_DIRS ${CMAKEIT_MODULE_OUTPUT_CONFIGURED_PRIVATE_HEADER_DIR})
	endif()

	if(CMAKEIT_MODULE_OUTPUT_CONFIGURED_PRIVATE_HEADER_DIR)
		list(APPEND INTERNAL_HEADER_DIRS ${CMAKEIT_MODULE_OUTPUT_CONFIGURED_PUBLIC_HEADER_DIR})
	endif()

	if(CMAKEIT_MODULE_SOURCE_DIR)
		list(APPEND INTERNAL_SOURCE_DIRS ${CMAKEIT_MODULE_SOURCE_DIR})
	endif()

	if(CMAKEIT_MODULE_OUTPUT_CONFIGURED_SOURCE_DIR)
		list(APPEND INTERNAL_SOURCE_DIRS ${CMAKEIT_MODULE_SOURCE_DIR})
	endif()

	if(NOT CMAKEIT_MODULE_PCH_HEADER_FILENAME)

		foreach(INTERNAL_HEADER_DIR ${INTERNAL_HEADER_DIRS})

			foreach(INTERNAL_SOURCE_DIR ${INTERNAL_SOURCE_DIRS})

				if((NOT CMAKEIT_FIND_PCH_FILES_HEADER_FILENAME) AND ((CMAKEIT_MODULE_NAME) AND (CMAKEIT_SUBMODULE_NAME)))

					cmakeit_pch_file_exists("${INTERNAL_HEADER_DIR}/${CMAKEIT_MODULE_NAME}/${CMAKEIT_SUBMODULE_NAME}/${HEADER_FILENAME}" 
						"${INTERNAL_SOURCE_DIR}/${CMAKEIT_MODULE_NAME}/${CMAKEIT_SUBMODULE_NAME}/${SOURCE_FILENAME}")

				endif()

				if((NOT CMAKEIT_FIND_PCH_FILES_HEADER_FILENAME) AND (CMAKEIT_MODULE_NAME))

					cmakeit_pch_file_exists("${INTERNAL_HEADER_DIR}/${CMAKEIT_MODULE_NAME}/${HEADER_FILENAME}" 
						"${INTERNAL_SOURCE_DIR}/${CMAKEIT_MODULE_NAME}/${SOURCE_FILENAME}")

				endif()
				
				if(NOT CMAKEIT_FIND_PCH_FILES_HEADER_FILENAME)
			
					cmakeit_pch_file_exists("${INTERNAL_HEADER_DIR}/${HEADER_FILENAME}" 
						"${INTERNAL_SOURCE_DIR}/${SOURCE_FILENAME}")

				endif()

				if(CMAKEIT_FIND_PCH_FILES_HEADER_FILENAME AND (NOT CMAKEIT_FIND_PCH_FILES_HEADER_DIR))

					set(CMAKEIT_FIND_PCH_FILES_HEADER_DIR ${INTERNAL_HEADER_DIR})
					
					string(REPLACE "${CMAKEIT_FIND_PCH_FILES_HEADER_DIR}/" "" CMAKEIT_FIND_PCH_FILES_HEADER_FILENAME_RELATIVE ${CMAKEIT_FIND_PCH_FILES_HEADER_FILENAME})

				endif()
				
			endforeach()

		endforeach()

	endif()

	if(CMAKEIT_FIND_PCH_FILES_HEADER_FILENAME)

		set(CMAKEIT_MODULE_PCH_HEADER_DIR ${CMAKEIT_FIND_PCH_FILES_HEADER_DIR} PARENT_SCOPE)
		set(CMAKEIT_MODULE_PCH_HEADER_FILENAME ${CMAKEIT_FIND_PCH_FILES_HEADER_FILENAME} PARENT_SCOPE)
		set(CMAKEIT_MODULE_PCH_HEADER_FILENAME_RELATIVE ${CMAKEIT_FIND_PCH_FILES_HEADER_FILENAME_RELATIVE} PARENT_SCOPE)
		set(CMAKEIT_MODULE_PCH_SOURCE_FILENAME ${CMAKEIT_FIND_PCH_FILES_SOURCE_FILENAME} PARENT_SCOPE)

		unset(CMAKEIT_FIND_PCH_FILES_HEADER_DIR)
		unset(CMAKEIT_FIND_PCH_FILES_HEADER_FILENAME)
		unset(CMAKEIT_FIND_PCH_FILES_HEADER_FILENAME_RELATIVE)
		unset(CMAKEIT_FIND_PCH_FILES_SOURCE_FILENAME)

	endif()

endfunction()

#
# cmakeit_target_apply_build_properties - scan header and source files for pre-compiled headers support
#
# Parameters:
#   CMAKEIT_MODULE_UNITTEST (optional) - unit test target name. If not specified, configure current module target
#
function(cmakeit_target_apply_build_properties IS_UNITTEST UNITTEST_NAME)

	if(IS_UNITTEST AND UNITTEST_NAME)
		set(TARGET_NAME "${CMAKEIT_MODULE}_${UNITTEST_NAME}")
	else()

		set(TARGET_NAME "${CMAKEIT_MODULE}")
		set(IS_UNITTEST OFF)

	endif()

	if(CMAKEIT_MODULE_PUBLIC_HEADER_DIR)
		target_include_directories(${TARGET_NAME} BEFORE PUBLIC ${CMAKEIT_MODULE_PUBLIC_HEADER_DIR})
	endif()

	if(CMAKEIT_MODULE_OUTPUT_CONFIGURED_PUBLIC_HEADER_DIR)
		target_include_directories(${TARGET_NAME} BEFORE PUBLIC ${CMAKEIT_MODULE_OUTPUT_CONFIGURED_PUBLIC_HEADER_DIR})
	endif()

	if(NOT IS_UNITTEST)

		if(CMAKEIT_MODULE_PRIVATE_HEADER_DIR)
			target_include_directories(${TARGET_NAME} BEFORE PRIVATE ${CMAKEIT_MODULE_PRIVATE_HEADER_DIR})
		endif()

		if(CMAKEIT_MODULE_OUTPUT_CONFIGURED_PRIVATE_HEADER_DIR)
			target_include_directories(${TARGET_NAME} BEFORE PRIVATE ${CMAKEIT_MODULE_OUTPUT_CONFIGURED_PRIVATE_HEADER_DIR})
		endif()
	
	endif()
	
	if(CMAKEIT_EXTERNAL_PUBLIC_HEADER_DIRECTORIES)
	
		foreach(PUBLIC_HEADER_DIRECTORY ${CMAKEIT_EXTERNAL_PUBLIC_HEADER_DIRECTORIES})
			target_include_directories(${TARGET_NAME} BEFORE PRIVATE ${PUBLIC_HEADER_DIRECTORY})
		endforeach()
		
	endif()

	if(CMAKEIT_EXTERNAL_PRIVATE_HEADER_DIRECTORIES)
	
		foreach(PRIVATE_HEADER_DIRECTORY ${CMAKEIT_EXTERNAL_PRIVATE_HEADER_DIRECTORIES})
			target_include_directories(${TARGET_NAME} BEFORE PRIVATE ${PRIVATE_HEADER_DIRECTORY})
		endforeach()
		
	endif()

	if(IS_UNITTEST)
		target_compile_definitions(${TARGET_NAME} PRIVATE "_CONSOLE")
	else()
		
		if(CMAKEIT_MODULE_TYPE STREQUAL ${CMAKEIT_MODULE_TYPE_APPLICATION})

			if(CMAKEIT_MODULE_SUBTYPE STREQUAL ${CMAKEIT_MODULE_SUBTYPE_CONSOLE})
				target_compile_definitions(${TARGET_NAME} PRIVATE "_CONSOLE")
			endif()

		elseif(CMAKEIT_MODULE_TYPE STREQUAL ${CMAKEIT_MODULE_TYPE_LIBRARY})

			if(CMAKEIT_MODULE_SUBTYPE STREQUAL ${CMAKEIT_MODULE_SUBTYPE_STATIC})
				target_compile_definitions(${TARGET_NAME} PRIVATE "_LIB")
			elseif(CMAKEIT_MODULE_SUBTYPE STREQUAL ${CMAKEIT_MODULE_SUBTYPE_SHARED})
				target_compile_definitions(${TARGET_NAME} PRIVATE "_USRDLL")		
			endif()

		endif()

	endif()

	if(CMAKEIT_TARGET_PLATFORM_VARIANT STREQUAL ${CMAKEIT_TARGET_PLATFORM_VARIANT_WINDOWS_UWP})
	
		target_compile_definitions(${TARGET_NAME} PRIVATE "UNICODE")
		target_compile_definitions(${TARGET_NAME} PRIVATE "_UNICODE")

	elseif(CMAKEIT_TARGET_PLATFORM STREQUAL ${CMAKEIT_TARGET_PLATFORM_WINDOWS})

		if(NOT CMAKEIT_MODULE_NO_UNICODE)

			target_compile_definitions(${TARGET_NAME} PRIVATE "UNICODE")
			target_compile_definitions(${TARGET_NAME} PRIVATE "_UNICODE")

		endif()

	endif()
	
	if(NOT IS_UNITTEST)

		set_target_properties(${TARGET_NAME} PROPERTIES 
			PUBLIC_HEADER "${CMAKEIT_MODULE_PUBLIC_HEADER_FILES}")

	endif()

	set_target_properties(${TARGET_NAME} PROPERTIES 
		LINKER_LANGUAGE CXX)

	if((MINGW) OR (CYGWIN AND (CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_CLANG})))

		set_target_properties(${TARGET_NAME} PROPERTIES 
			INTERPROCEDURAL_OPTIMIZATION OFF)
			
	else()

		set_target_properties(${TARGET_NAME} PROPERTIES 
			INTERPROCEDURAL_OPTIMIZATION ON)
			
	endif()
	
	if(CYGWIN AND (CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_CLANG}))

		set_target_properties(${TARGET_NAME} PROPERTIES 
			POSITION_INDEPENDENT_CODE OFF)
	
	else()

		set_target_properties(${TARGET_NAME} PROPERTIES 
			POSITION_INDEPENDENT_CODE ON)
	
	endif()

	if(CMAKEIT_MODULE_C_EXTENSIONS)

		set_target_properties(${TARGET_NAME} PROPERTIES 
			C_EXTENSIONS ON)

		set(TARGET_MODULE_PCH_C_EXTENSION "gnu")
		
	else()
		
		set_target_properties(${TARGET_NAME} PROPERTIES 
			C_EXTENSIONS OFF)
			
		set(TARGET_MODULE_PCH_C_EXTENSION "c")

	endif()
	
	if(CMAKEIT_MODULE_C_STANDARD_REQUIRED STREQUAL ${CMAKEIT_COMPILER_C_STANDARD_18})
		
		set_target_properties(${TARGET_NAME} PROPERTIES 
			C_STANDARD 18
			C_STANDARD_REQUIRED ON)
		
		if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_VISUAL_C})
			set(TARGET_MODULE_PCH_C_STANDARD "")
		else()
			set(TARGET_MODULE_PCH_C_STANDARD "-std=STDEXT18")
		endif()

	elseif(CMAKEIT_MODULE_C_STANDARD_REQUIRED STREQUAL ${CMAKEIT_COMPILER_C_STANDARD_11})
		
		set_target_properties(${TARGET_NAME} PROPERTIES 
			C_STANDARD 11
			C_STANDARD_REQUIRED ON)
		
		if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_VISUAL_C})
			set(TARGET_MODULE_PCH_C_STANDARD "")
		else()
			set(TARGET_MODULE_PCH_C_STANDARD "-std=STDEXT11")
		endif()

	elseif(CMAKEIT_MODULE_C_STANDARD_REQUIRED STREQUAL ${CMAKEIT_COMPILER_C_STANDARD_99})
		
		set_target_properties(${TARGET_NAME} PROPERTIES 
			C_STANDARD 99
			C_STANDARD_REQUIRED ON)
		
		if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_VISUAL_C})
			set(TARGET_MODULE_PCH_C_STANDARD "")
		else()
			set(TARGET_MODULE_PCH_C_STANDARD "-std=STDEXT99")
		endif()

	elseif(CMAKEIT_MODULE_C_STANDARD_REQUIRED STREQUAL ${CMAKEIT_COMPILER_C_STANDARD_90})

		set_target_properties(${TARGET_NAME} PROPERTIES 
			C_STANDARD 90
			C_STANDARD_REQUIRED ON)
		
		if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_VISUAL_C})
			set(TARGET_MODULE_PCH_C_STANDARD "")
		else()
			set(TARGET_MODULE_PCH_C_STANDARD "-std=STDEXT90")
		endif()

	endif()

	string(REPLACE "STDEXT" "${TARGET_MODULE_PCH_C_EXTENSION}" TARGET_MODULE_PCH_C_STANDARD "${TARGET_MODULE_PCH_C_STANDARD}")

	if(CMAKEIT_MODULE_CXX_EXTENSIONS)
				
		set_target_properties(${TARGET_NAME} PROPERTIES 
			CXX_EXTENSIONS ON)

		set(TARGET_MODULE_PCH_CXX_EXTENSION "gnu")
		
	else()
		
		set_target_properties(${TARGET_NAME} PROPERTIES 
			CXX_EXTENSIONS OFF)

		set(TARGET_MODULE_PCH_CXX_EXTENSION "c")

	endif()

	if(CMAKEIT_MODULE_CXX_STANDARD_REQUIRED STREQUAL ${CMAKEIT_COMPILER_CXX_STANDARD_2A})
		
		set_target_properties(${TARGET_NAME} PROPERTIES 
			CXX_STANDARD 20
			CXX_STANDARD_REQUIRED OFF)
		
		if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_VISUAL_C})
			set(TARGET_MODULE_PCH_CXX_STANDARD "/std:c++latest")
		else()
			set(TARGET_MODULE_PCH_CXX_STANDARD "-std=STDEXT++2a")
		endif()

	elseif(CMAKEIT_MODULE_CXX_STANDARD_REQUIRED STREQUAL ${CMAKEIT_COMPILER_CXX_STANDARD_17})
		
		set_target_properties(${TARGET_NAME} PROPERTIES 
			CXX_STANDARD 17
			CXX_STANDARD_REQUIRED ON)
		
		if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_VISUAL_C})
			set(TARGET_MODULE_PCH_CXX_STANDARD "/std:c++17")
		else()
			set(TARGET_MODULE_PCH_CXX_STANDARD "-std=STDEXT++17")
		endif()
		
	elseif(CMAKEIT_MODULE_CXX_STANDARD_REQUIRED STREQUAL ${CMAKEIT_COMPILER_CXX_STANDARD_1Z})
				
		set_target_properties(${TARGET_NAME} PROPERTIES 
			CXX_STANDARD 17
			CXX_STANDARD_REQUIRED OFF)

		if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_VISUAL_C})
			set(TARGET_MODULE_PCH_CXX_STANDARD "/std:c++17")
		else()
			set(TARGET_MODULE_PCH_CXX_STANDARD "-std=STDEXT++1z")
		endif()

	elseif(CMAKEIT_MODULE_CXX_STANDARD_REQUIRED STREQUAL ${CMAKEIT_COMPILER_CXX_STANDARD_14})
				
		set_target_properties(${TARGET_NAME} PROPERTIES 
			CXX_STANDARD 14
			CXX_STANDARD_REQUIRED ON)
		
		if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_VISUAL_C})
			set(TARGET_MODULE_PCH_CXX_STANDARD "/std:c++14")
		else()
			set(TARGET_MODULE_PCH_CXX_STANDARD "-std=STDEXT++14")
		endif()
		
	elseif(CMAKEIT_MODULE_CXX_STANDARD_REQUIRED STREQUAL ${CMAKEIT_COMPILER_CXX_STANDARD_1Y})
				
		set_target_properties(${TARGET_NAME} PROPERTIES 
			CXX_STANDARD 14
			CXX_STANDARD_REQUIRED OFF)

		if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_VISUAL_C})
			set(TARGET_MODULE_PCH_CXX_STANDARD "/std:c++14")
		else()
			set(TARGET_MODULE_PCH_CXX_STANDARD "-std=STDEXT++1y")
		endif()

	elseif(CMAKEIT_MODULE_CXX_STANDARD_REQUIRED STREQUAL ${CMAKEIT_COMPILER_CXX_STANDARD_11})
				
		set_target_properties(${TARGET_NAME} PROPERTIES 
			CXX_STANDARD 11
			CXX_STANDARD_REQUIRED ON)

		if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_VISUAL_C})
			set(TARGET_MODULE_PCH_CXX_STANDARD "")
		else()
			set(TARGET_MODULE_PCH_CXX_STANDARD "-std=STDEXT++11")
		endif()
	
	elseif(CMAKEIT_MODULE_CXX_STANDARD_REQUIRED STREQUAL ${CMAKEIT_COMPILER_CXX_STANDARD_0X})
				
		set_target_properties(${TARGET_NAME} PROPERTIES 
			CXX_STANDARD 11
			CXX_STANDARD_REQUIRED OFF)

		if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_VISUAL_C})
			set(TARGET_MODULE_PCH_CXX_STANDARD "")
		else()
			set(TARGET_MODULE_PCH_CXX_STANDARD "-std=STDEXT++0X")
		endif()

	elseif(CMAKEIT_MODULE_CXX_STANDARD_REQUIRED STREQUAL ${CMAKEIT_COMPILER_CXX_STANDARD_98})
				
		set_target_properties(${TARGET_NAME} PROPERTIES 
			CXX_STANDARD 98
			CXX_STANDARD_REQUIRED ON)
		
		if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_VISUAL_C})
			set(TARGET_MODULE_PCH_CXX_STANDARD "")
		else()
			set(TARGET_MODULE_PCH_CXX_STANDARD "-std=STDEXT++98")
		endif()
		
	endif()

	string(REPLACE "STDEXT" "${TARGET_MODULE_PCH_CXX_EXTENSION}" TARGET_MODULE_PCH_CXX_STANDARD "${TARGET_MODULE_PCH_CXX_STANDARD}")

	target_link_libraries(${TARGET_NAME} ${CMAKEIT_DEPENDENCIES})

	if(IS_UNITTEST AND (CMAKEIT_MODULE_TYPE STREQUAL ${CMAKEIT_MODULE_TYPE_LIBRARY}))
		target_link_libraries(${TARGET_NAME} ${CMAKEIT_MODULE})
	endif()

	if(CMAKEIT_EXTERNAL_DEPENDENCIES)
	
		foreach(EXTERNAL_DEPENDENCY ${CMAKEIT_EXTERNAL_DEPENDENCIES})
			find_library(EXTERNAL_DEPENDENCY_FILENAME ${EXTERNAL_DEPENDENCY})

			if(NOT CMAKEIT_HIDE_BANNER)
				
				if(NOT IS_UNITTEST)
					message(STATUS "| | +-- Searching external library dependency ${EXTERNAL_DEPENDENCY} ...")
				endif()

			endif()

			if(EXTERNAL_DEPENDENCY_FILENAME)
				target_link_libraries(${TARGET_NAME} ${EXTERNAL_DEPENDENCY_FILENAME})
			else()
				message(FATAL_ERROR "cannot find library ${EXTERNAL_DEPENDENCY_FILENAME}")
			endif()
			
		endforeach()
		
	endif()

	get_target_property(TARGET_LINKER_FLAGS ${TARGET_NAME} LINK_FLAGS)
	get_target_property(TARGET_STATIC_LIBRARY_LINKER_FLAGS ${TARGET_NAME} STATIC_LIBRARY_FLAGS)

	if(TARGET_LINKER_FLAGS MATCHES "NOTFOUND$")
		set(TARGET_LINKER_FLAGS "")
	endif()
	
	if(TARGET_STATIC_LIBRARY_LINKER_FLAGS MATCHES "NOTFOUND$")
		set(TARGET_STATIC_LIBRARY_LINKER_FLAGS "")
	endif()

	if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_VISUAL_C})
	
		target_compile_options(${TARGET_NAME} PRIVATE "/W4")
		target_compile_options(${TARGET_NAME} PRIVATE "/fp:precise")
		target_compile_options(${TARGET_NAME} PRIVATE "/Zc:forScope")
		target_compile_options(${TARGET_NAME} PRIVATE "/Zc:wchar_t")
		target_compile_options(${TARGET_NAME} PRIVATE "/Zc:inline")
		target_compile_options(${TARGET_NAME} PRIVATE "/diagnostics:classic")
		target_compile_options(${TARGET_NAME} PRIVATE "/errorReport:prompt")
		target_compile_options(${TARGET_NAME} PRIVATE "/Qpar")
		target_compile_options(${TARGET_NAME} PRIVATE "/Gd")
		target_compile_options(${TARGET_NAME} PRIVATE "/GS")
		target_compile_options(${TARGET_NAME} PRIVATE "/sdl")
		target_compile_options(${TARGET_NAME} PRIVATE "/guard:cf")

		if(NOT CMAKEIT_MODULE_NO_SPECTRE_MITIGATIONS)
			target_compile_options(${TARGET_NAME} PRIVATE "/Qspectre")
		endif()

		if(CMAKEIT_TARGET_ARCHITECTURE STREQUAL ${CMAKEIT_TARGET_ARCHITECTURE_INTEL_X86})
			target_compile_options(${TARGET_NAME} PRIVATE "/Oy-")
		endif()

		if(CMAKEIT_BUILD_TYPE STREQUAL ${CMAKEIT_BUILD_TYPE_DEBUG})
		
			target_compile_options(${TARGET_NAME} PRIVATE "/RTC1")

			if(NOT (CMAKEIT_TARGET_PLATFORM_VARIANT STREQUAL ${CMAKEIT_TARGET_PLATFORM_VARIANT_WINDOWS_UWP}))
				target_compile_options(${TARGET_NAME} PRIVATE "/Gm")
			endif()

			set(TARGET_LINKER_FLAGS "/INCREMENTAL /OPT:NOREF /OPT:NOICF ${TARGET_LINKER_FLAGS}")
			
		endif()

		if((CMAKEIT_BUILD_TYPE STREQUAL ${CMAKEIT_BUILD_TYPE_RELEASE}) OR (CMAKEIT_BUILD_TYPE STREQUAL ${CMAKEIT_BUILD_TYPE_RELWITHDEBINFO}))
		
			target_compile_options(${TARGET_NAME} PRIVATE "/Gm-")
			target_compile_options(${TARGET_NAME} PRIVATE "/Oi")
			target_compile_options(${TARGET_NAME} PRIVATE "/GL")

			set(TARGET_LINKER_FLAGS "/OPT:REF /OPT:ICF ${TARGET_LINKER_FLAGS}")

			get_target_property(TARGET_MODULE_PCH_NEED_PIC ${TARGET_NAME} POSITION_INDEPENDENT_CODE)
			get_target_property(TARGET_MODULE_PCH_NEED_LTO ${TARGET_NAME} INTERPROCEDURAL_OPTIMIZATION)
	
			if(TARGET_MODULE_PCH_NEED_PIC)
				target_compile_options(${TARGET_NAME} PRIVATE "/Gy")
			endif()

			if(TARGET_MODULE_PCH_NEED_LTO)
			
				set(TARGET_STATIC_LIBRARY_LINKER_FLAGS "/LTCG ${TARGET_STATIC_LIBRARY_LINKER_FLAGS}")
				set(TARGET_LINKER_FLAGS "/LTCG ${TARGET_LINKER_FLAGS}")
			
				endif()
			
		endif()
		
		if(IS_UNITTEST OR ((CMAKEIT_MODULE_TYPE STREQUAL ${CMAKEIT_MODULE_TYPE_APPLICATION}) AND (CMAKEIT_MODULE_SUBTYPE STREQUAL ${CMAKEIT_MODULE_SUBTYPE_CONSOLE})))
			set(TARGET_LINKER_FLAGS "/SUBSYSTEM:CONSOLE ${TARGET_LINKER_FLAGS}")
		endif()
		
	elseif((CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_CLANG}) OR (CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_GCC}))

		target_compile_definitions(${TARGET_NAME} PRIVATE "_REENTRANT")

		target_compile_options(${TARGET_NAME} PRIVATE "-Wall")
		target_compile_options(${TARGET_NAME} PRIVATE "-Wextra")
		target_compile_options(${TARGET_NAME} PRIVATE "-frtti")
		target_compile_options(${TARGET_NAME} PRIVATE "-fexceptions")

		if((NOT CMAKEIT_MODULE_C_EXTENSIONS) AND (NOT CMAKEIT_MODULE_CXX_EXTENSIONS))
			
			target_compile_options(${TARGET_NAME} PRIVATE "-ansi")
			target_compile_options(${TARGET_NAME} PRIVATE "-pedantic")
			target_compile_options(${TARGET_NAME} PRIVATE "-pedantic-errors")

		endif()

		if(NOT CMAKEIT_MODULE_NO_SPECTRE_MITIGATIONS)
			
			if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_CLANG})
				
				target_compile_options(${TARGET_NAME} PRIVATE "-mretpoline")

				if(CMAKEIT_COMPILER_SPECTRE_MITIGATIONS_ADVANCED)
					target_compile_options(${TARGET_NAME} PRIVATE "-mspeculative-load-hardening")
				endif()

			endif()
			
			if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_GCC})

				if((CMAKEIT_TARGET_ARCHITECTURE STREQUAL ${CMAKEIT_TARGET_ARCHITECTURE_INTEL_X86}) OR (CMAKEIT_TARGET_ARCHITECTURE STREQUAL ${CMAKEIT_TARGET_ARCHITECTURE_INTEL_X64}))

					target_compile_options(${TARGET_NAME} PRIVATE "-mindirect-branch=thunk")
					target_compile_options(${TARGET_NAME} PRIVATE "-mindirect-branch-register")
					target_compile_options(${TARGET_NAME} PRIVATE "-mfunction-return=thunk")

				elseif((CMAKEIT_TARGET_ARCHITECTURE STREQUAL ${CMAKEIT_TARGET_ARCHITECTURE_INTEL_ARM64}))

					target_compile_options(${TARGET_NAME} PRIVATE "-mtrack-speculation")

				endif()

			endif()

		endif()

		if(NOT MINGW)
		
			target_compile_options(${TARGET_NAME} PRIVATE "-fstack-protector-strong")

			set(TARGET_LINKER_FLAGS "-fstack-protector-strong ${TARGET_LINKER_FLAGS}")

			if(CMAKEIT_TARGET_PLATFORM_VARIANT STREQUAL ${CMAKEIT_TARGET_PLATFORM_VARIANT_UNIX_LINUX})
			
				target_compile_options(${TARGET_NAME} PRIVATE "-pthread")
				
				set(TARGET_LINKER_FLAGS "-pthread -lpthread -ldl -lrt ${TARGET_LINKER_FLAGS}")
				
			endif()

		endif()

		if((CMAKEIT_BUILD_TYPE STREQUAL ${CMAKEIT_BUILD_TYPE_DEBUG}) OR (CMAKEIT_BUILD_TYPE STREQUAL ${CMAKEIT_BUILD_TYPE_RELWITHDEBINFO}))		
			target_compile_options(${TARGET_NAME} PRIVATE "-g")		   
		endif()

		if((CMAKEIT_BUILD_TYPE STREQUAL ${CMAKEIT_BUILD_TYPE_RELEASE}) OR (CMAKEIT_BUILD_TYPE STREQUAL ${CMAKEIT_BUILD_TYPE_RELWITHDEBINFO}))
		
			target_compile_definitions(${TARGET_NAME} PRIVATE "_FORTIFY_SOURCE=2")
			target_compile_options(${TARGET_NAME} PRIVATE "-ffunction-sections")
			target_compile_options(${TARGET_NAME} PRIVATE "-fdata-sections")
			
		endif()

		if(MINGW)
		
			if(IS_UNITTEST OR ((CMAKEIT_MODULE_TYPE STREQUAL ${CMAKEIT_MODULE_TYPE_APPLICATION}) AND (CMAKEIT_MODULE_SUBTYPE STREQUAL ${CMAKEIT_MODULE_SUBTYPE_UI})))

				set(TARGET_LINKER_FLAGS "-mwindows ${TARGET_LINKER_FLAGS}")

				target_compile_options(${TARGET_NAME} PRIVATE "-mwindows")
				
			endif()

			if(IS_UNITTEST OR ((CMAKEIT_MODULE_TYPE STREQUAL ${CMAKEIT_MODULE_TYPE_APPLICATION}) AND (CMAKEIT_MODULE_SUBTYPE STREQUAL ${CMAKEIT_MODULE_SUBTYPE_CONSOLE})))
			
				set(TARGET_LINKER_FLAGS "-mconsole ${TARGET_LINKER_FLAGS}")

				target_compile_options(${TARGET_NAME} PRIVATE "-mconsole")
				
			endif()
			
		endif()

		if((CMAKEIT_TARGET_ARCHITECTURE STREQUAL ${CMAKEIT_TARGET_ARCHITECTURE_INTEL_X86}) OR (CMAKEIT_TARGET_ARCHITECTURE STREQUAL ${CMAKEIT_TARGET_ARCHITECTURE_ARM}))
		
			set(TARGET_LINKER_FLAGS "-m32 ${TARGET_LINKER_FLAGS}")

			target_compile_options(${TARGET_NAME} PRIVATE "-m32")
			
		endif()

		if((CMAKEIT_TARGET_ARCHITECTURE STREQUAL ${CMAKEIT_TARGET_ARCHITECTURE_INTEL_X64}) OR (CMAKEIT_TARGET_ARCHITECTURE STREQUAL ${CMAKEIT_TARGET_ARCHITECTURE_ARM64}))
		
			set(TARGET_LINKER_FLAGS "-m64 ${TARGET_LINKER_FLAGS}")

			target_compile_options(${TARGET_NAME} PRIVATE "-m64")
			
		endif()

		if(CMAKEIT_TARGET_PLATFORM_VARIANT STREQUAL ${CMAKEIT_TARGET_PLATFORM_VARIANT_WINDOWS_WINDOWS_API})
			set(TARGET_LINKER_FLAGS "-Wl,--dynamicbase -Wl,--nxcompat ${TARGET_LINKER_FLAGS}")
		endif()
		
		if((CMAKEIT_MODULE_TYPE STREQUAL ${CMAKEIT_MODULE_TYPE_LIBRARY}) AND (CMAKEIT_MODULE_SUBTYPE STREQUAL ${CMAKEIT_MODULE_SUBTYPE_SHARED}))
			set(TARGET_LINKER_FLAGS "-shared ${TARGET_LINKER_FLAGS}")
		endif()
		
	endif()

	if(NOT (TARGET_LINKER_FLAGS STREQUAL ""))
		set_target_properties(${TARGET_NAME} PROPERTIES LINK_FLAGS ${TARGET_LINKER_FLAGS})
	endif()

	if(NOT (TARGET_STATIC_LIBRARY_LINKER_FLAGS STREQUAL ""))
		set_target_properties(${TARGET_NAME} PROPERTIES STATIC_LIBRARY_FLAGS ${TARGET_STATIC_LIBRARY_LINKER_FLAGS})
	endif()

	if((NOT CMAKEIT_MODULE_NO_PCH) AND (CMAKEIT_MODULE_PCH_HEADER_FILENAME))

		set(TARGET_MODULE_PCH_HEADER_OUTPUT_FILENAME "${CMAKEIT_MODULE_PCH_HEADER_FILENAME}.${CMAKEIT_COMPILER_PCH_SUFFIX}")

		if((CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_VISUAL_C}) AND CMAKEIT_MODULE_PCH_SOURCE_FILENAME)
		
			set_source_files_properties(${CMAKEIT_MODULE_PCH_SOURCE_FILENAME} PROPERTIES
				COMPILE_FLAGS "/Yc\"${CMAKEIT_MODULE_PCH_HEADER_FILENAME_RELATIVE}\" /Fp\"${TARGET_MODULE_PCH_HEADER_OUTPUT_FILENAME}\""
				OBJECT_OUTPUTS "${TARGET_MODULE_PCH_HEADER_OUTPUT_FILENAME}")

			foreach(TARGET_MODULE_SOURCE_FILE ${CMAKEIT_MODULE_SOURCE_FILES})
			
				file(READ ${TARGET_MODULE_SOURCE_FILE} TARGET_MODULE_SOURCE_FILE_CONTENTS)

				set(TARGET_MODULE_SOURCE_FILE_LOOK_FOR "#include <${CMAKEIT_MODULE_PCH_HEADER_FILENAME_RELATIVE}>")

				string(FIND "${TARGET_MODULE_SOURCE_FILE_CONTENTS}" ${TARGET_MODULE_SOURCE_FILE_LOOK_FOR} TARGET_MODULE_SOURCE_FILE_PCH_INCLUSION_INDEX)

				if(NOT (TARGET_MODULE_SOURCE_FILE_PCH_INCLUSION_INDEX EQUAL -1))
				
					set_source_files_properties(${TARGET_MODULE_SOURCE_FILE} PROPERTIES
						COMPILE_FLAGS "/Yu\"${CMAKEIT_MODULE_PCH_HEADER_FILENAME_RELATIVE}\" /FI\"${TARGET_MODULE_PCH_HEADER_OUTPUT_FILENAME}\" /Fp\"${TARGET_MODULE_PCH_HEADER_OUTPUT_FILENAME}\""
						OBJECT_DEPENDS "${TARGET_MODULE_PCH_HEADER_OUTPUT_FILENAME}")
						
				endif()
				
			endforeach()
			
		elseif((CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_CLANG}) OR (CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_GCC}))
		
			target_compile_options(${TARGET_NAME} PRIVATE "-Winvalid-pch")

			set(TARGET_MODULE_PCH_HEADER_DIRECTORIES_EXPR "$<TARGET_PROPERTY:${TARGET_NAME},INCLUDE_DIRECTORIES>")
			set(TARGET_MODULE_PCH_COMPILE_DEFINITIONS_EXPR "$<TARGET_PROPERTY:${TARGET_NAME},COMPILE_DEFINITIONS>")

			if(CMAKEIT_BUILD_TYPE STREQUAL ${CMAKEIT_BUILD_TYPE_DEBUG})
				set(TARGET_MODULE_PCH_COMPILE_LANG_FLAGS_EXPR "${CMAKE_CXX_FLAGS_DEBUG}")
			elseif((CMAKEIT_BUILD_TYPE STREQUAL ${CMAKEIT_BUILD_TYPE_RELEASE}) OR (CMAKEIT_BUILD_TYPE STREQUAL ${CMAKEIT_BUILD_TYPE_RELWITHDEBINFO}))
				set(TARGET_MODULE_PCH_COMPILE_LANG_FLAGS_EXPR "${CMAKE_CXX_FLAGS_RELEASE}")
			endif()

			set(TARGET_MODULE_PCH_COMPILE_FLAGS_EXPR "$<TARGET_PROPERTY:${TARGET_NAME},COMPILE_FLAGS>")
			set(TARGET_MODULE_PCH_COMPILE_OPTIONS_EXPR "$<TARGET_PROPERTY:${TARGET_NAME},COMPILE_OPTIONS>")
			set(TARGET_MODULE_PCH_COMPILE_EXTRA_OPTIONS "")

			set(TARGET_MODULE_PCH_CREATE_ARGUMENT -x c++-header)
			set(TARGET_MODULE_PCH_USE_ARGUMENT)

			if(!IS_UNITTEST AND (CMAKEIT_MODULE_TYPE STREQUAL ${CMAKEIT_MODULE_TYPE_LIBRARY}))
			   
				if(CMAKEIT_MODULE_SUBTYPE STREQUAL ${CMAKEIT_MODULE_SUBTYPE_SHARED})
					set(TARGET_MODULE_PCH_COMPILE_EXTRA_OPTIONS ${TARGET_MODULE_PCH_COMPILE_EXTRA_OPTIONS} -D${CMAKEIT_MODULE}_EXPORTS)
				endif()
				
			endif()

			set(TARGET_MODULE_PCH_HEADER_DIRECTORIES "$<$<BOOL:${TARGET_MODULE_PCH_HEADER_DIRECTORIES_EXPR}>:-I$<JOIN:${TARGET_MODULE_PCH_HEADER_DIRECTORIES_EXPR},\n-I>\n>")
			set(TARGET_MODULE_PCH_COMPILE_DEFINITIONS " $<$<BOOL:${TARGET_MODULE_PCH_COMPILE_DEFINITIONS_EXPR}>:-D$<JOIN:${TARGET_MODULE_PCH_COMPILE_DEFINITIONS_EXPR},\n-D>\n>")
			set(TARGET_MODULE_PCH_COMPILE_LANG_FLAGS " $<$<BOOL:${TARGET_MODULE_PCH_COMPILE_LANG_FLAGS_EXPR}>:$<JOIN:${TARGET_MODULE_PCH_COMPILE_LANG_FLAGS_EXPR},\n>\n>")
			set(TARGET_MODULE_PCH_COMPILE_FLAGS " $<$<BOOL:${TARGET_MODULE_PCH_COMPILE_FLAGS_EXPR}>:$<JOIN:${TARGET_MODULE_PCH_COMPILE_FLAGS_EXPR},\n>\n>")
			set(TARGET_MODULE_PCH_COMPILE_OPTIONS " $<$<BOOL:${TARGET_MODULE_PCH_COMPILE_OPTIONS_EXPR}>:$<JOIN:${TARGET_MODULE_PCH_COMPILE_OPTIONS_EXPR},\n>\n>")
	
			set(TARGET_MODULE_PCH_COMPILE_RESPONSE_FILE "${TARGET_MODULE_PCH_HEADER_OUTPUT_FILENAME}.rsp")
			
			cmakeit_is_c_filename(${CMAKEIT_MODULE_PCH_HEADER_FILENAME} TARGET_MODULE_IS_C_PCH)
			cmakeit_is_cxx_filename(${CMAKEIT_MODULE_PCH_HEADER_FILENAME} TARGET_MODULE_IS_CXX_PCH)

			if(TARGET_MODULE_IS_C_PCH)

				set(TARGET_MODULE_PCH_COMPILER "${CMAKE_C_COMPILER}")
				set(TARGET_MODULE_PCH_STANDARD "${TARGET_MODULE_PCH_C_STANDARD}")
				set(TARGET_MODULE_PCH_OPTIONS_LTO "${CMAKE_C_COMPILE_OPTIONS_LTO}")

			elseif(TARGET_MODULE_IS_CXX_PCH)

				set(TARGET_MODULE_PCH_COMPILER "${CMAKE_CXX_COMPILER}")
				set(TARGET_MODULE_PCH_STANDARD "${TARGET_MODULE_PCH_CXX_STANDARD}")
				set(TARGET_MODULE_PCH_OPTIONS_LTO "${CMAKE_CXX_COMPILE_OPTIONS_LTO}")

			endif()
			
			get_target_property(TARGET_MODULE_PCH_NEED_PIC ${TARGET_NAME} POSITION_INDEPENDENT_CODE)
			get_target_property(TARGET_MODULE_PCH_NEED_LTO ${TARGET_NAME} INTERPROCEDURAL_OPTIMIZATION)

			if(TARGET_MODULE_PCH_NEED_PIC)
				
				if(IS_UNITTEST OR (CMAKEIT_MODULE_TYPE STREQUAL ${CMAKEIT_MODULE_TYPE_APPLICATION}))
				
					if(CMAKE_CXX_LINK_PIE_SUPPORTED)
						set(TARGET_MODULE_PCH_PIC_FLAGS "${TARGET_MODULE_PCH_PIC_FLAGS}-fPIE")
					endif()
					
				else()
					set(TARGET_MODULE_PCH_PIC_FLAGS "${TARGET_MODULE_PCH_PIC_FLAGS}-fPIC")
				endif()

			endif()

			if(TARGET_MODULE_PCH_NEED_LTO)

				set(TARGET_MODULE_PCH_LTO_FLAGS "${TARGET_MODULE_PCH_LTO_FLAGS}-flto")

				if(CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_GCC})
					set(TARGET_MODULE_PCH_LTO_FLAGS "${TARGET_MODULE_PCH_LTO_FLAGS}\n-fno-fat-lto-objects")
				endif()
				
				if((CMAKEIT_COMPILER STREQUAL ${CMAKEIT_COMPILER_CLANG}) AND (_CMAKE_LTO_THIN))
					set(TARGET_MODULE_PCH_LTO_FLAGS "${TARGET_MODULE_PCH_LTO_FLAGS}=thin")
				endif()

			endif()

			file(GENERATE OUTPUT "${TARGET_MODULE_PCH_COMPILE_RESPONSE_FILE}" CONTENT "${TARGET_MODULE_PCH_HEADER_DIRECTORIES}${TARGET_MODULE_PCH_COMPILE_DEFINITIONS}${TARGET_MODULE_PCH_COMPILE_LANG_FLAGS}${TARGET_MODULE_PCH_COMPILE_FLAGS}${TARGET_MODULE_PCH_COMPILE_OPTIONS}${TARGET_MODULE_PCH_PIC_FLAGS}\n${TARGET_MODULE_PCH_LTO_FLAGS}\n${TARGET_MODULE_PCH_STANDARD}\n")

			set(TARGET_MODULE_PCH_COMPILE_COMMAND_LINE @${TARGET_MODULE_PCH_COMPILE_RESPONSE_FILE} ${CMAKE_CXX_FLAGS} ${TARGET_MODULE_PCH_COMPILE_EXTRA_OPTIONS})

			add_custom_command(
				OUTPUT "${TARGET_MODULE_PCH_HEADER_OUTPUT_FILENAME}"
				COMMAND "${TARGET_MODULE_PCH_COMPILER}" ${TARGET_MODULE_PCH_COMPILE_COMMAND_LINE} ${TARGET_MODULE_PCH_CREATE_ARGUMENT} -o "${TARGET_MODULE_PCH_HEADER_OUTPUT_FILENAME}" "${CMAKEIT_MODULE_PCH_HEADER_FILENAME}")

			foreach(TARGET_MODULE_SOURCE_FILE ${CMAKEIT_MODULE_SOURCE_FILES})
			
				cmakeit_is_c_filename(${TARGET_MODULE_SOURCE_FILE} TARGET_MODULE_IS_C_FILENAME)
				cmakeit_is_cxx_filename(${TARGET_MODULE_SOURCE_FILE} TARGET_MODULE_IS_CXX_FILENAME)

				if(((TARGET_MODULE_IS_C_PCH) AND (TARGET_MODULE_IS_C_FILENAME)) OR ((TARGET_MODULE_IS_CXX_PCH) AND (TARGET_MODULE_IS_CXX_FILENAME)))
						
					file(READ ${TARGET_MODULE_SOURCE_FILE} TARGET_MODULE_SOURCE_FILE_CONTENTS)

					set(TARGET_MODULE_SOURCE_FILE_LOOK_FOR "#include <${CMAKEIT_MODULE_PCH_HEADER_FILENAME_RELATIVE}>")

					string(FIND "${TARGET_MODULE_SOURCE_FILE_CONTENTS}" "${TARGET_MODULE_SOURCE_FILE_LOOK_FOR}" TARGET_MODULE_SOURCE_FILE_PCH_INCLUSION_INDEX)

					if(NOT (TARGET_MODULE_SOURCE_FILE_PCH_INCLUSION_INDEX EQUAL -1))
					
						set_source_files_properties(${TARGET_MODULE_SOURCE_FILE} PROPERTIES
							COMPILE_FLAGS "${TARGET_MODULE_PCH_USE_ARGUMENT}"
							OBJECT_DEPENDS "${TARGET_MODULE_PCH_HEADER_OUTPUT_FILENAME}")
							
					endif()
				
				endif()
				
				unset(TARGET_MODULE_IS_C_FILENAME)
				unset(TARGET_MODULE_IS_CXX_FILENAME)
				
			endforeach()
			
		endif()
	
	endif()

endfunction()

#
# cmakeit_match_target_architecture - find target architecture
#
# Parameters:
#   MATCH_STRING - architecture string to match
#
function(cmakeit_match_target_architecture MATCH_STRING)

	if((NOT CMAKEIT_TARGET_ARCHITECTURE) AND MATCH_STRING)

		string(REGEX MATCH "i686" INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_I686 ${MATCH_STRING})
		string(REGEX MATCH "i586" INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_I586 ${MATCH_STRING})
		string(REGEX MATCH "i386" INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_I386 ${MATCH_STRING})
		string(REGEX MATCH "x86_64" INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_X86_64 ${MATCH_STRING})
		string(REGEX MATCH "x64" INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_X64 ${MATCH_STRING})
		string(REGEX MATCH "arm" INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_ARM ${MATCH_STRING})
		string(REGEX MATCH "armhf" INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_ARMHF ${MATCH_STRING})
		string(REGEX MATCH "arm64" INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_ARM64 ${MATCH_STRING})
		string(REGEX MATCH "aarch64" INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_AARCH64 ${MATCH_STRING})

		if(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_X86_64 OR INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_X64)

			set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_INTEL_X64} PARENT_SCOPE)
			
			unset(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_X86_64)
			unset(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_X64)
			
		endif()

		if(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_I686 OR INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_I586 OR INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_I386)

			set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_INTEL_X86} PARENT_SCOPE)
			
			unset(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_I686)
			unset(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_I586)
			unset(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_I386)

		endif()

		if(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_ARM64 OR INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_AARCH64)

			set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_ARM64} PARENT_SCOPE)
			
			unset(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_ARM64)
			unset(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_AARCH64)

		endif()

		if(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_ARMHF OR INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_ARM)

			set(CMAKEIT_TARGET_ARCHITECTURE ${CMAKEIT_TARGET_ARCHITECTURE_ARM} PARENT_SCOPE)

			unset(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_ARMHF)
			unset(INTERNAL_CMAKEIT_DETECT_TARGET_ARCHITECTURE_ARM)

		endif()

	endif()
	
endfunction()
